name="UZAIR"
print("Hello",name)

name="UZAIR"
print(f"Hello {name}")

a=1
for i in range(10):
    print("Hi",a)
    a+=1

a=10
b=20
print(f"the sum of {a} and {b} is {a+b}")

carbon_footpoint=500.75
print(f"carbon footpoint: {carbon_footpoint} Kg CO2")

is_sustainable=carbon_footpoint<400
print(f"is the City Sustainable?: {is_sustainable}")

x,y,z=1,2,3
x

weekly_temp=[25,27,28,30,24,18,36]
print(f"Weekly temp: {weekly_temp}")

city_data={
    "name": "City x",
    "temp":27,
    "carbon_footpoint":500.75,
    "is_sustainable": False
}
print(f"City Data: {city_data}")

city_name,temp,carbon_footpoint="City x",26,500.75
print(f"City Name:{city_name}\ntemperature: {temp}*C\ncarbon footpoint:{carbon_footpoint} Kg CO2")

climate_data=[
    {"city":"City A","temp":25,"carbon_footprint":500},
    {"city":"City B","temp":30,"carbon_footprint":350},
    {"city":"City C","temp":22,"carbon_footprint":600},
    {"city":"City D","temp":15,"carbon_footprint":200},
    {"city":"City E","temp":28,"carbon_footprint":450}
]
high_temp_threshold=26
high_temp_cities=[city for city in climate_data if city["temp"]>high_temp_threshold]
print("Cities with high temp (>26*C):")
for city in high_temp_cities:
    print(f"{city["city"]} - {city["temp"]}")

total_carbon=0
for city in climate_data:
    total_carbon+=city["carbon_footprint"]
avg_carbon_footprint=total_carbon/len(climate_data)
print(f"\nAvg carbon footprint : {avg_carbon_footprint:.2f} Kg CO2")

sustainability_threshold=400
sustainable_cities=list(filter(lambda city: city["carbon_footprint"]<sustainability_threshold,climate_data))
print("\nSustainable Cities (carbon footprint < 400 Kg CO2):"
for city in sustainable_cities:
    print(f"{city["city"]} - {city["carbon_footprint"]} Kg CO2")

highest_footprint_city=max(climate_data,key=lambda city: city["carbon_footprint"])
print(f"\nCity with the highest carbon footprint:")
print(f"{highest_footprint_city["city"]} - {highest_footprint_city["carbon_footprint"]} Kg CO2")

def calc_carbon_footprint(energy_cunsumption,emission_factor):
    return energy_cunsumption*emission_factor

energy_cunsumption=1000
emission_factor=0.475
carbon_footprint= calc_carbon_footprint(energy_cunsumption,emission_factor)
print(f"Carbon Footprint: {carbon_footprint} Kg CO2")

pip install pandas numpy

import pandas as pd
renewable_sources=["Solar","Wind","Hydropower","Geothermal","Biomass"]
data = {
    "Project":["Solar Farm A","Wind Turbine X","Hydropower Y","solar Roof Z","Geothermal Plant P"],
    "Technology":["Solar","Wind","Hydropower","Solar","Geothermal"],
    "Capacity (MW)":[150,300,200,50,100],
    "Cost (Million $)":[200,400,350,100,250],
    "Location":["California","Texas","Washington","Nevada","Idaho"],
    "Completion Year":[2023,2024,2022,2025,2023]
}

renewable_series=pd.Series(renewable_sources)
print("Renewable Energy Sources:")
print(renewable_series)

project_df=pd.DataFrame(data)
print("\nFreen Technology Projects DataFrame:")
print(project_df)


print("\n List of project:")
print(project_df["Project"])

high_capacity_project=project_df[project_df["Capacity (MW)"]>100]
print("\n project with capacity greater than 100 MW:")
print(high_capacity_project)
      
project_df["cost per MW"]=project_df["Cost (Million $)"]
print("\n DataFrame with cost per MW:")
print(project_df)     


group_data=project_df.groupby("Technology")["Capacity (MW)"].sum()
print("\n Total Capcitybby Technology :")
print(group_data)


import numpy as np
energy_consumption= np.array([1200,3400,2900,2500])
print("energy consumption (in MWh) for Different Renewable source:")
print(energy_consumption)


total_consumption = np.sum (energy_consumption)
print(f"\n total Energy consumption :{total_consumption} MWh")

mean_consumption = np.mean(energy_consumption)
print(f"\n  Mean Energy consumption :{mean_consumption:.2f} MWh")

std_deviation = np.std(energy_consumption)
print(f"\n standard devation og energy consumption:{std_deviation:.2f} MWh")


import pandas as pd
import numpy as np
data={
    "Energy Source": ["Solar","Wind","Hydropower","Geothermal","Biomass","Nuclear"],
    "Energy Consumption (MWh)": [1200,np.nan,2900,np.nan,2500,3200],
    "Cost (Million $)":[200,400,np.nan,150,250,np.nan]
}
energy_df=pd.DataFrame(data)
print("Original Energy Data with Missing Values:")
print(energy_df)

cleaned_df=energy_df.dropna()
print("\nData After Removing Rows with Missing values:")
print(cleaned_df)

forward_filled_df=energy_df.fillna(method="ffill")
print("\ndata After Forward Filling:")
print(forward_filled_df)

energy_df["Energy Consumption (MWh)"].fillna(energy_df ["Energy Consumption (MWh)"].mean(), inplace=True)
energy_df ["Cost (Million $)"].fillna(energy_df ["Cost (Million $)"].mean(), inplace=True)
print("\nData After Imputing Missing Values with Mean:")
print(energy_df)

pip install scikit-learn

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
energy_df[["Energy Consumption (MWh)","Cost (Million $)"]]=scaler.fit_transform(
    energy_df[["Energy Consumption (MWh)","Cost (Million $)"]]
)
print("\nData after normalization(Min-Max Scaling):")
print(energy_df)

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
energy_df[["Energy Consumption (MWh)","Cost (Million $)"]]=scaler.fit_transform(
    energy_df[["Energy Consumption (MWh)","Cost (Million $)"]]
)
print("\nData after normalization(Standard Scaling):")
print(energy_df)

energy_encoded_df=pd.get_dummies(energy_df,columns=["Energy Source"])
print("\nData after One-Hot encoding categorical variables:")
print(energy_encoded_df)

energy_encoded_df["consumption per $million"]=energy_encoded_df["Energy Consumption (MWh)"]/energy_encoded_df["Cost (Million $)"]
print("data with new feature(consumption per $million)")
print(energy_encoded_df)

pip install matplotlib

import matplotlib.pyplot as plt
months=['Jan','Feb','Mar','Apr','May','Jun']
energy_consumption=[1200,1300,1100,1500,1400,1600]
plt.plot(months, energy_consumption, marker='o', color='b', linestyle='--')
plt.title('Energy Consumption over 6 months')
plt.xlabel('Month')
plt.ylabel('Energy Consumption(MWh)')
plt.show()

energy_sources=['Solar','wind','Hydropower','Biomass']
energy_values=[1200,3400,2900,2500]
plt.bar(energy_sources, energy_values, color='green')
plt.title('Energy Consumption by renewable energy source')
plt.xlabel('Energy source')
plt.ylabel('Energy Consumption(MWh)')
plt.show()

plt.pie(energy_values, labels=energy_sources, autopct='%1.1f%%', colors=['gold','lightblue','lightgreen','coral'])
plt.title('Energy consumption share by sources')
plt.show()

carbon_emissions = [200,500,450,300]
plt.scatter(energy_values,carbon_emissions, color='red')
plt.title('Energy Consumption vs carbon emissions')
plt.xlabel('Energy Consumption(MWh)')
plt.ylabel('carbon emissions(kg CO2)')
plt.show()

plt.bar(energy_sources, energy_values, color='orange' ,edgecolor='black',linewidth=2)
plt.title('Customised Energy Consumption by renewable energy source',fontsize=14,fontweight='bold')
plt.xlabel('Energy source',fontsize=12)
plt.ylabel('Energy Consumption(MWh)',fontsize=12)

plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(['Energy Consumption'],loc='upper left')
plt.show()

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt 
data={
    "solar":[1200,1500,1300],
    "wind":[3400,1500,3200],
    "hydropower":[2500,3100,2800],
    "biomass":[2500,2700,2400]
}
df=pd.DataFrame(data)
sns.pairplot(df)
plt.show()

correlation_matrix=df.corr()
sns.heatmap(correlation_matrix,annot=True,cmap='coolwarm',linewidth=0.5)
plt.title('Correlation between energy sources')
plt.show()

sns.boxplot(data=df)
plt.title('Distribution of energy consumption by source')
plt.show()

sns.violinplot(data=df)
plt.title('Distribution of energy consumption by source')
plt.show()

energy_values = [100, 200, 300, 400, 500]
carbon_emissions = [10, 20, 30, 40, 50]
df_reg = pd.DataFrame({
    'Energy Consumption': energy_values,
    'Carbon Emissions': carbon_emissions
})
sns.regplot(x='Energy Consumption', y='Carbon Emissions', data=df_reg)
plt.show()

energy_values = [100,200,300,400,500]
carbon_emisssions=[10,20,30,40,50]
df_reg=pd.DataFrame({
    'Energy Consumption': energy_values,
    'Carbon emissions': carbon_emisssions
})

sns.regplot(x='Energy Consumption',y='Carbon emissions',data=df_reg)
plt.title('Energy Consumption vs carbon emissions')
plt.xlabel('Energy Consumption(MWh)')
plt.ylabel('carbon emissions(kg CO2)')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df=pd.read_csv('appliance_energy (1).csv')
print(df.head())

x=df[['Temperature (°C)']]
y=df['Energy Consumption (kWh)']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(x_train,y_train)

y_pred=model.predict(x_test)

y_pred

mse=mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
r2=r2_score(y_test,y_pred)
print(f'R-Squared Error: {r2}')

plt.scatter(x_test,y_test, color='blue', label='Test Data')
plt.plot(x_test,y_pred, color='red', label='Reggression Line')
plt.xlabel('Temperature (°C)')
plt.ylabel('Energy Consumption (kWh)')
plt.show()

conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Not Sustainable','Sustainable'],
            yticklabels=['Not Sustainable','Sustainable'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print(classification_report(y_test,y_pred,target_names=['Not Sustainable','Sustainable']))c

coefficients = pd.DataFrame(model.coef_.T, index=x.columns, columns=['Coefficient'])
print(coefficients)

import joblib
joblib.dump(model, 'lrmodel sustainable.pkl')


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

data=pd.read_csv("environmental factors.csv")
data.head()

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)
print(pd.DataFrame(data_scaled, columns=data.columns).head())

inertia=[]
k_range=range(1,11)
for k in k_range:
    kmeans=KMeans(n_clusters=k,random_state=42)
    kmeans.fit(data_scaled)
    inertia.append(kmeans.inertia_)
plt.plot(k_range,inertia,marker='o')
plt.title("Elbow Method")
plt.xlable("Number of Clusters(k)")
plt.ylable("Inertia")
plt.show()

k=7
kmeans = KMeans(n_clusters=k, random_state=42)
data['cluster'] = kmeans.fit_predict(data_scaled)
print(data.head())

sil_score=silhouette_score(data_scaled, data['cluster'])
print(f'Silhouette Score: {sil_score}')

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(8, 6))
sns.scatterplot(x='carbon_emissions', y='pollution_level', hue='cluster',
                data=data, palette='viridis', s=100, alpha=0.7, edgecolor='k')

pip install tensorflow

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

data=pd.read_csv("predict_energy_consumption.csv")
data.head()

x=data[["temperature","humidity","wind_speed","solar_irradiance"]].values
y=data["energy_consumption"].values

X_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

scaler=StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.transform(X_test)

X_train=scaler.fit_transform(X_train)
X_test=scaler.transform(X_test)

